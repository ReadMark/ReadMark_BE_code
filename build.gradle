plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'ReadMark Backend Project'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// QueryDSL 추가
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	
	// H2 데이터베이스 (개발용)
	runtimeOnly 'com.h2database:h2'
	
	// Google Vision API (via Google Cloud BOM for consistent versions)
	implementation platform('com.google.cloud:libraries-bom:26.44.0')
	implementation 'com.google.cloud:google-cloud-vision'
	
	// 이미지 처리
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// JSON 처리
	implementation 'com.fasterxml.jackson.core:jackson-databind'
}

// QueryDSL 설정
def generated = 'src/main/generated'

sourceSets {
	main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
}
